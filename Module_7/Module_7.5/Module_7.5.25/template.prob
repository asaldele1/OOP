{"name": "OOP: 7.5.25", "url": "https://stepik.org/lesson/872533/step/25", "tests": [{"id": 0, "input": "dna = DNA('AGTC')\n\nprint(dna[0])\nprint(dna[1])\nprint(dna[2])\nprint(dna[3])\nprint(dna[-1])\nprint(dna[-2])", "output": "('A', 'T')\n('G', 'C')\n('T', 'A')\n('C', 'G')\n('C', 'G')\n('T', 'A')"}, {"id": 1, "input": "dna = DNA('AGT')\n\nprint(dna)\nprint(len(dna))\nprint('A' in dna)\nprint('C' in dna)", "output": "AGT\n3\nTrue\nFalse"}, {"id": 2, "input": "dna1 = DNA('ACG')\ndna2 = DNA('TTTAAT')\ndna3 = dna1 + dna2\ndna4 = dna2 + dna1\n\nprint(dna3, type(dna3))\nprint(dna4, type(dna4))", "output": "ACGTTTAAT <class '__main__.DNA'>\nTTTAATACG <class '__main__.DNA'>"}, {"id": 3, "input": "dna1 = DNA('ACG')\ndna2 = DNA('TTTAAT')\ndna3 = DNA('TTTAAT')\n\nprint(dna1 == dna2)\nprint(dna2 == dna3)\nprint(dna1 != dna3)\nprint(dna2 != dna3)", "output": "False\nTrue\nTrue\nFalse"}, {"id": 4, "input": "dna = DNA('TGAACCTGACCTCGATTTCAAGGG')\n\nprint(*dna)\nprint(*reversed(dna))\nprint('A' in dna)\nprint('C' not in dna)", "output": "('T', 'A') ('G', 'C') ('A', 'T') ('A', 'T') ('C', 'G') ('C', 'G') ('T', 'A') ('G', 'C') ('A', 'T') ('C', 'G') ('C', 'G') ('T', 'A') ('C', 'G') ('G', 'C') ('A', 'T') ('T', 'A') ('T', 'A') ('T', 'A') ('C', 'G') ('A', 'T') ('A', 'T') ('G', 'C') ('G', 'C') ('G', 'C')\n('G', 'C') ('G', 'C') ('G', 'C') ('A', 'T') ('A', 'T') ('C', 'G') ('T', 'A') ('T', 'A') ('T', 'A') ('A', 'T') ('G', 'C') ('C', 'G') ('T', 'A') ('C', 'G') ('C', 'G') ('A', 'T') ('G', 'C') ('T', 'A') ('C', 'G') ('C', 'G') ('A', 'T') ('A', 'T') ('G', 'C') ('T', 'A')\nTrue\nFalse"}, {"id": 5, "input": "dna = DNA('ACG')\nnot_supported = [1, 2.23, [1, 2, 3], {1: 'one'}, {4, 5, 6}, True, False, 'CTA', (7, 8, 9)]\n\nfor item in not_supported:\n    print(item == dna)", "output": "False\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse"}, {"id": 6, "input": "dnas = ['TAAAACCCCATCGGCTCTGACAATGAAC', 'AGATGTTCCCTCTAATATCTATACGAAT', 'ACGACGCACTGCATACAATACAATAGTG',\n        'TCCCAGTCAGGATCGGATTGGTATAATC', 'TACACGCATAGTGCCCAACTCCTACCCG', 'TCACCGCTGAAAACATGTTCTGGAGGGC',\n        'CCCAGGATAGACCTATTTGCCGTATCCA', 'ATCGATCGTGCGGGAAATCCTGCCATAT', 'AGACCAACTTATTGGGCACACGCTCCGG',\n        'CGCGTCCCCCATATCAACGCGTGAATGC', 'AGTCACGATCAGCTGGACGTAGTGGCAA', 'GTGTAGGGTCAAGGGACACCTGATATCT',\n        'AAAAGACGAAAATTGCTAAGTGGCAGTC', 'TGGAGGCCGAGCTCGCGTTGGAAATAGT', 'AAGTCTGCCGAGGCGGGTCGGGAGCGCC',\n        'ATTATCCAATCCAGTCACGTATTGAATA', 'ATTGTGAACCTTATACGTTAGTAATACC', 'AGACAATCATGCTATTAGGTATGACGTT',\n        'ATCACTGAGGCAGAGACTAGCCGCGCTT', 'TATGGGTGGTATCCTAAGCATTCAATGG']\n\nfor base in dnas:\n    dna = DNA(base)\n    print(*dna)", "output": "('T', 'A') ('A', 'T') ('A', 'T') ('A', 'T') ('A', 'T') ('C', 'G') ('C', 'G') ('C', 'G') ('C', 'G') ('A', 'T') ('T', 'A') ('C', 'G') ('G', 'C') ('G', 'C') ('C', 'G') ('T', 'A') ('C', 'G') ('T', 'A') ('G', 'C') ('A', 'T') ('C', 'G') ('A', 'T') ('A', 'T') ('T', 'A') ('G', 'C') ('A', 'T') ('A', 'T') ('C', 'G')\n('A', 'T') ('G', 'C') ('A', 'T') ('T', 'A') ('G', 'C') ('T', 'A') ('T', 'A') ('C', 'G') ('C', 'G') ('C', 'G') ('T', 'A') ('C', 'G') ('T', 'A') ('A', 'T') ('A', 'T') ('T', 'A') ('A', 'T') ('T', 'A') ('C', 'G') ('T', 'A') ('A', 'T') ('T', 'A') ('A', 'T') ('C', 'G') ('G', 'C') ('A', 'T') ('A', 'T') ('T', 'A')\n('A', 'T') ('C', 'G') ('G', 'C') ('A', 'T') ('C', 'G') ('G', 'C') ('C', 'G') ('A', 'T') ('C', 'G') ('T', 'A') ('G', 'C') ('C', 'G') ('A', 'T') ('T', 'A') ('A', 'T') ('C', 'G') ('A', 'T') ('A', 'T') ('T', 'A') ('A', 'T') ('C', 'G') ('A', 'T') ('A', 'T') ('T', 'A') ('A', 'T') ('G', 'C') ('T', 'A') ('G', 'C')\n('T', 'A') ('C', 'G') ('C', 'G') ('C', 'G') ('A', 'T') ('G', 'C') ('T', 'A') ('C', 'G') ('A', 'T') ('G', 'C') ('G', 'C') ('A', 'T') ('T', 'A') ('C', 'G') ('G', 'C') ('G', 'C') ('A', 'T') ('T', 'A') ('T', 'A') ('G', 'C') ('G', 'C') ('T', 'A') ('A', 'T') ('T', 'A') ('A', 'T') ('A', 'T') ('T', 'A') ('C', 'G')\n('T', 'A') ('A', 'T') ('C', 'G') ('A', 'T') ('C', 'G') ('G', 'C') ('C', 'G') ('A', 'T') ('T', 'A') ('A', 'T') ('G', 'C') ('T', 'A') ('G', 'C') ('C', 'G') ('C', 'G') ('C', 'G') ('A', 'T') ('A', 'T') ('C', 'G') ('T', 'A') ('C', 'G') ('C', 'G') ('T', 'A') ('A', 'T') ('C', 'G') ('C', 'G') ('C', 'G') ('G', 'C')\n('T', 'A') ('C', 'G') ('A', 'T') ('C', 'G') ('C', 'G') ('G', 'C') ('C', 'G') ('T', 'A') ('G', 'C') ('A', 'T') ('A', 'T') ('A', 'T') ('A', 'T') ('C', 'G') ('A', 'T') ('T', 'A') ('G', 'C') ('T', 'A') ('T', 'A') ('C', 'G') ('T', 'A') ('G', 'C') ('G', 'C') ('A', 'T') ('G', 'C') ('G', 'C') ('G', 'C') ('C', 'G')\n('C', 'G') ('C', 'G') ('C', 'G') ('A', 'T') ('G', 'C') ('G', 'C') ('A', 'T') ('T', 'A') ('A', 'T') ('G', 'C') ('A', 'T') ('C', 'G') ('C', 'G') ('T', 'A') ('A', 'T') ('T', 'A') ('T', 'A') ('T', 'A') ('G', 'C') ('C', 'G') ('C', 'G') ('G', 'C') ('T', 'A') ('A', 'T') ('T', 'A') ('C', 'G') ('C', 'G') ('A', 'T')\n('A', 'T') ('T', 'A') ('C', 'G') ('G', 'C') ('A', 'T') ('T', 'A') ('C', 'G') ('G', 'C') ('T', 'A') ('G', 'C') ('C', 'G') ('G', 'C') ('G', 'C') ('G', 'C') ('A', 'T') ('A', 'T') ('A', 'T') ('T', 'A') ('C', 'G') ('C', 'G') ('T', 'A') ('G', 'C') ('C', 'G') ('C', 'G') ('A', 'T') ('T', 'A') ('A', 'T') ('T', 'A')\n('A', 'T') ('G', 'C') ('A', 'T') ('C', 'G') ('C', 'G') ('A', 'T') ('A', 'T') ('C', 'G') ('T', 'A') ('T', 'A') ('A', 'T') ('T', 'A') ('T', 'A') ('G', 'C') ('G', 'C') ('G', 'C') ('C', 'G') ('A', 'T') ('C', 'G') ('A', 'T') ('C', 'G') ('G', 'C') ('C', 'G') ('T', 'A') ('C', 'G') ('C', 'G') ('G', 'C') ('G', 'C')\n('C', 'G') ('G', 'C') ('C', 'G') ('G', 'C') ('T', 'A') ('C', 'G') ('C', 'G') ('C', 'G') ('C', 'G') ('C', 'G') ('A', 'T') ('T', 'A') ('A', 'T') ('T', 'A') ('C', 'G') ('A', 'T') ('A', 'T') ('C', 'G') ('G', 'C') ('C', 'G') ('G', 'C') ('T', 'A') ('G', 'C') ('A', 'T') ('A', 'T') ('T', 'A') ('G', 'C') ('C', 'G')\n('A', 'T') ('G', 'C') ('T', 'A') ('C', 'G') ('A', 'T') ('C', 'G') ('G', 'C') ('A', 'T') ('T', 'A') ('C', 'G') ('A', 'T') ('G', 'C') ('C', 'G') ('T', 'A') ('G', 'C') ('G', 'C') ('A', 'T') ('C', 'G') ('G', 'C') ('T', 'A') ('A', 'T') ('G', 'C') ('T', 'A') ('G', 'C') ('G', 'C') ('C', 'G') ('A', 'T') ('A', 'T')\n('G', 'C') ('T', 'A') ('G', 'C') ('T', 'A') ('A', 'T') ('G', 'C') ('G', 'C') ('G', 'C') ('T', 'A') ('C', 'G') ('A', 'T') ('A', 'T') ('G', 'C') ('G', 'C') ('G', 'C') ('A', 'T') ('C', 'G') ('A', 'T') ('C', 'G') ('C', 'G') ('T', 'A') ('G', 'C') ('A', 'T') ('T', 'A') ('A', 'T') ('T', 'A') ('C', 'G') ('T', 'A')\n('A', 'T') ('A', 'T') ('A', 'T') ('A', 'T') ('G', 'C') ('A', 'T') ('C', 'G') ('G', 'C') ('A', 'T') ('A', 'T') ('A', 'T') ('A', 'T') ('T', 'A') ('T', 'A') ('G', 'C') ('C', 'G') ('T', 'A') ('A', 'T') ('A', 'T') ('G', 'C') ('T', 'A') ('G', 'C') ('G', 'C') ('C', 'G') ('A', 'T') ('G', 'C') ('T', 'A') ('C', 'G')\n('T', 'A') ('G', 'C') ('G', 'C') ('A', 'T') ('G', 'C') ('G', 'C') ('C', 'G') ('C', 'G') ('G', 'C') ('A', 'T') ('G', 'C') ('C', 'G') ('T', 'A') ('C', 'G') ('G', 'C') ('C', 'G') ('G', 'C') ('T', 'A') ('T', 'A') ('G', 'C') ('G', 'C') ('A', 'T') ('A', 'T') ('A', 'T') ('T', 'A') ('A', 'T') ('G', 'C') ('T', 'A')\n('A', 'T') ('A', 'T') ('G', 'C') ('T', 'A') ('C', 'G') ('T', 'A') ('G', 'C') ('C', 'G') ('C', 'G') ('G', 'C') ('A', 'T') ('G', 'C') ('G', 'C') ('C', 'G') ('G', 'C') ('G', 'C') ('G', 'C') ('T', 'A') ('C', 'G') ('G', 'C') ('G', 'C') ('G', 'C') ('A', 'T') ('G', 'C') ('C', 'G') ('G', 'C') ('C', 'G') ('C', 'G')\n('A', 'T') ('T', 'A') ('T', 'A') ('A', 'T') ('T', 'A') ('C', 'G') ('C', 'G') ('A', 'T') ('A', 'T') ('T', 'A') ('C', 'G') ('C', 'G') ('A', 'T') ('G', 'C') ('T', 'A') ('C', 'G') ('A', 'T') ('C', 'G') ('G', 'C') ('T', 'A') ('A', 'T') ('T', 'A') ('T', 'A') ('G', 'C') ('A', 'T') ('A', 'T') ('T', 'A') ('A', 'T')\n('A', 'T') ('T', 'A') ('T', 'A') ('G', 'C') ('T', 'A') ('G', 'C') ('A', 'T') ('A', 'T') ('C', 'G') ('C', 'G') ('T', 'A') ('T', 'A') ('A', 'T') ('T', 'A') ('A', 'T') ('C', 'G') ('G', 'C') ('T', 'A') ('T', 'A') ('A', 'T') ('G', 'C') ('T', 'A') ('A', 'T') ('A', 'T') ('T', 'A') ('A', 'T') ('C', 'G') ('C', 'G')\n('A', 'T') ('G', 'C') ('A', 'T') ('C', 'G') ('A', 'T') ('A', 'T') ('T', 'A') ('C', 'G') ('A', 'T') ('T', 'A') ('G', 'C') ('C', 'G') ('T', 'A') ('A', 'T') ('T', 'A') ('T', 'A') ('A', 'T') ('G', 'C') ('G', 'C') ('T', 'A') ('A', 'T') ('T', 'A') ('G', 'C') ('A', 'T') ('C', 'G') ('G', 'C') ('T', 'A') ('T', 'A')\n('A', 'T') ('T', 'A') ('C', 'G') ('A', 'T') ('C', 'G') ('T', 'A') ('G', 'C') ('A', 'T') ('G', 'C') ('G', 'C') ('C', 'G') ('A', 'T') ('G', 'C') ('A', 'T') ('G', 'C') ('A', 'T') ('C', 'G') ('T', 'A') ('A', 'T') ('G', 'C') ('C', 'G') ('C', 'G') ('G', 'C') ('C', 'G') ('G', 'C') ('C', 'G') ('T', 'A') ('T', 'A')\n('T', 'A') ('A', 'T') ('T', 'A') ('G', 'C') ('G', 'C') ('G', 'C') ('T', 'A') ('G', 'C') ('G', 'C') ('T', 'A') ('A', 'T') ('T', 'A') ('C', 'G') ('C', 'G') ('T', 'A') ('A', 'T') ('A', 'T') ('G', 'C') ('C', 'G') ('A', 'T') ('T', 'A') ('T', 'A') ('C', 'G') ('A', 'T') ('A', 'T') ('T', 'A') ('G', 'C') ('G', 'C')"}, {"id": 7, "input": "dna = DNA('ACG')\nprint(dna.__eq__(1))\nprint(dna.__ne__(1.1))\nprint(dna.__add__([1, 2, 3]))", "output": "NotImplemented\nNotImplemented\nNotImplemented"}], "interactive": false, "memoryLimit": 256, "timeLimit": 15000, "srcPath": "c:\\Users\\asald\\Documents\\OOP\\Module_7\\Module_7.5\\Module_7.5.25\\problem.py", "group": "OOP"}