{"name": "OOP: 9.1.14", "url": "https://stepik.org/lesson/864077/step/14", "tests": [{"id": 0, "input": "@predicate\ndef to_be():\n    return True\n\nprint((to_be | ~to_be)())                     # True; \u0440\u0430\u0432\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e to_be() or not to_be()\n\n@predicate\ndef is_equal(a, b):\n    return a == b\n\n@predicate\ndef is_less_than(a, b):\n    return a < b\n\nprint((is_less_than | is_equal)(1, 2))        # True; \u0440\u0430\u0432\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e is_less_than(1, 2) or is_equal(1, 2)\n\nprint((is_less_than | is_equal)(2, b=2))      # True; \u0440\u0430\u0432\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e is_less_than(2, b=2) or is_equal(2, b=2)\nprint((is_less_than | is_equal)(a=3, b=2))    # False; \u0440\u0430\u0432\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e is_less_than(a=3, b=2) or is_equal(a=3, b=2)", "output": "True\nTrue\nTrue\nFalse"}, {"id": 1, "input": "@predicate\ndef is_even(num):\n    return num % 2 == 0\n\n@predicate\ndef is_positive(num):\n    return num > 0\n\nprint((is_even & is_positive)(4))             # True; \u0440\u0430\u0432\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e is_even(4) and is_positive(4)\nprint((is_even & is_positive)(3))             # False; \u0440\u0430\u0432\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e is_even(3) and is_positive(3)\nprint((is_even | is_positive)(3))             # True; \u0440\u0430\u0432\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e is_even(3) or is_positive(3)\nprint((~is_even & is_positive)(3))            # True; \u0440\u0430\u0432\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e not is_even(3) and is_positive(3)", "output": "True\nFalse\nTrue\nTrue"}, {"id": 2, "input": "@predicate\ndef is_less_than(a, b):\n    return a < b\n\nprint(is_less_than(1, 2))\nprint(is_less_than(2, 2))\nprint(is_less_than(3, 2))", "output": "True\nFalse\nFalse"}, {"id": 3, "input": "@predicate\ndef char_in_word(char, word):\n    return char in word\n\n\nprint(char_in_word('e', 'beegeek'))\nprint((~char_in_word & char_in_word)('e', 'beegeek'))\nprint((char_in_word | ~char_in_word)(word='beegeek', char='e'))", "output": "True\nFalse\nTrue"}, {"id": 4, "input": "@predicate\ndef is_arithmetic_mean(iterable):\n    result = {iterable[i + 1] - iterable[i] for i in range(len(iterable) - 1)}\n    return len(result) == 1\n\n\n@predicate\ndef is_geometric_mean(iterable):\n    result = {iterable[i + 1] // iterable[i] for i in range(len(iterable) - 1)}\n    return len(result) == 1\n\n\nprint(is_arithmetic_mean([1, 2, 3, 4, 5]))\nprint(is_geometric_mean([1, 2, 4, 8, 16]))\n\nprint((is_arithmetic_mean & is_geometric_mean)([1, 2, 3, 4, 5]))\nprint((is_arithmetic_mean | is_geometric_mean)([1, 2, 3, 4, 5]))\n\nprint((is_arithmetic_mean & is_geometric_mean)([1, 2, 4, 8, 16]))\nprint((is_arithmetic_mean | is_geometric_mean)([1, 2, 4, 8, 16]))\n\nprint((~is_arithmetic_mean & ~is_geometric_mean)([1, 2, 4, 5]))\nprint((~is_arithmetic_mean | ~is_geometric_mean)([1, 2, 3, 4, 5]))", "output": "True\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue"}], "interactive": false, "memoryLimit": 256, "timeLimit": 15000, "srcPath": "/home/asalde_le1/\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b/OOP/Module_9/Module_9.1/Module_9.1.14/problem.py", "group": "OOP"}